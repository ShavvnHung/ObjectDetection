{"mmdet_version": "2.18.1a7a16af", "CLASSES": ["Muscovy duck", "Wild duck", "Goose", "Squirrel", "Egret", "Pigeon", "Black swan", "Moorhen", "Kingfisher"], "env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.5.r11.5/compiler.30411180_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.4\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1+cu110\nOpenCV: 4.5.4-dev\nMMCV: 1.3.17\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.5\nMMDetection: 2.18.1+a7a16af", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='YOLOV3',\n    backbone=dict(\n        type='Darknet',\n        depth=53,\n        out_indices=(3, 4, 5),\n        init_cfg=dict(type='Pretrained', checkpoint='open-mmlab://darknet53')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[1024, 512, 256],\n        out_channels=[512, 256, 128]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=9,\n        in_channels=[512, 256, 128],\n        out_channels=[1024, 512, 256],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='PhotoMetricDistortion'),\n    dict(type='Expand', mean=[0, 0, 0], to_rgb=True, ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(type='Resize', img_scale=[(320, 320), (608, 608)], keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(608, 608),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/train.json',\n        img_prefix='data/coco/image/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Expand', mean=[0, 0, 0], to_rgb=True,\n                ratio_range=(1, 2)),\n            dict(\n                type='MinIoURandomCrop',\n                min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                min_crop_size=0.3),\n            dict(\n                type='Resize',\n                img_scale=[(320, 320), (608, 608)],\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/val.json',\n        img_prefix='data/coco/image/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/test.json',\n        img_prefix='data/coco/image/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(type='SGD', lr=0.000125, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=2000,\n    warmup_ratio=0.1,\n    step=[218, 246])\nrunner = dict(type='EpochBasedRunner', max_epochs=273)\nevaluation = dict(interval=1, metric=['bbox'])\nwork_dir = 'work_dir'\ngpu_ids = range(0, 1)\n", "seed": 340463355, "exp_name": "yolov3_d53_mstrain-608_273e_coco.py", "epoch": 250, "iter": 15000, "mmcv_version": "1.3.17", "time": "Tue Nov 30 03:40:48 2021", "hook_msgs": {"last_ckpt": "/home/r10942155/mmdetection/work_dir/epoch_236.pth"}}
{"mode": "train", "epoch": 251, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08376, "loss_cls": 12.80109, "loss_conf": 40.88001, "loss_xy": 47.81613, "loss_wh": 2.34335, "loss": 103.84057, "grad_norm": 1700.19175, "time": 0.45037}
{"mode": "val", "epoch": 251, "iter": 60, "lr": 0.0, "bbox_mAP": 0.279, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.301, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.272, "bbox_mAP_copypaste": "0.279 0.523 0.301 -1.000 0.217 0.272"}
{"mode": "train", "epoch": 252, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.09016, "loss_cls": 9.45925, "loss_conf": 36.78465, "loss_xy": 51.09126, "loss_wh": 1.80373, "loss": 99.1389, "grad_norm": 1599.23455, "time": 0.4567}
{"mode": "val", "epoch": 252, "iter": 60, "lr": 0.0, "bbox_mAP": 0.281, "bbox_mAP_50": 0.519, "bbox_mAP_75": 0.306, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.275, "bbox_mAP_copypaste": "0.281 0.519 0.306 -1.000 0.223 0.275"}
{"mode": "train", "epoch": 253, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07111, "loss_cls": 11.37171, "loss_conf": 38.46908, "loss_xy": 49.76669, "loss_wh": 1.89222, "loss": 101.4997, "grad_norm": 1647.44341, "time": 0.44061}
{"mode": "val", "epoch": 253, "iter": 60, "lr": 0.0, "bbox_mAP": 0.277, "bbox_mAP_50": 0.52, "bbox_mAP_75": 0.315, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.271, "bbox_mAP_copypaste": "0.277 0.520 0.315 -1.000 0.217 0.271"}
{"mode": "train", "epoch": 254, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.09189, "loss_cls": 13.3531, "loss_conf": 40.73381, "loss_xy": 49.67319, "loss_wh": 2.06074, "loss": 105.82084, "grad_norm": 1669.20728, "time": 0.45805}
{"mode": "val", "epoch": 254, "iter": 60, "lr": 0.0, "bbox_mAP": 0.28, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.314, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.272, "bbox_mAP_copypaste": "0.280 0.523 0.314 -1.000 0.217 0.272"}
{"mode": "train", "epoch": 255, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08021, "loss_cls": 11.94933, "loss_conf": 39.58776, "loss_xy": 49.43075, "loss_wh": 2.10498, "loss": 103.07282, "grad_norm": 1655.15325, "time": 0.46164}
{"mode": "val", "epoch": 255, "iter": 60, "lr": 0.0, "bbox_mAP": 0.279, "bbox_mAP_50": 0.521, "bbox_mAP_75": 0.305, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.208, "bbox_mAP_l": 0.271, "bbox_mAP_copypaste": "0.279 0.521 0.305 -1.000 0.208 0.271"}
{"mode": "train", "epoch": 256, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07984, "loss_cls": 11.62776, "loss_conf": 39.04583, "loss_xy": 48.83998, "loss_wh": 1.80519, "loss": 101.31875, "grad_norm": 1651.50826, "time": 0.44602}
{"mode": "val", "epoch": 256, "iter": 60, "lr": 0.0, "bbox_mAP": 0.282, "bbox_mAP_50": 0.525, "bbox_mAP_75": 0.309, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.274, "bbox_mAP_copypaste": "0.282 0.525 0.309 -1.000 0.217 0.274"}
{"mode": "train", "epoch": 257, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08149, "loss_cls": 11.50936, "loss_conf": 40.79082, "loss_xy": 48.12725, "loss_wh": 2.06805, "loss": 102.49548, "grad_norm": 1643.8675, "time": 0.44958}
{"mode": "val", "epoch": 257, "iter": 60, "lr": 0.0, "bbox_mAP": 0.28, "bbox_mAP_50": 0.518, "bbox_mAP_75": 0.317, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.273, "bbox_mAP_copypaste": "0.280 0.518 0.317 -1.000 0.217 0.273"}
{"mode": "train", "epoch": 258, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.09641, "loss_cls": 10.25953, "loss_conf": 35.62135, "loss_xy": 47.35126, "loss_wh": 2.01923, "loss": 95.25136, "grad_norm": 1593.77778, "time": 0.45213}
{"mode": "val", "epoch": 258, "iter": 60, "lr": 0.0, "bbox_mAP": 0.283, "bbox_mAP_50": 0.524, "bbox_mAP_75": 0.309, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.275, "bbox_mAP_copypaste": "0.283 0.524 0.309 -1.000 0.217 0.275"}
{"mode": "train", "epoch": 259, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.079, "loss_cls": 11.89582, "loss_conf": 43.8805, "loss_xy": 48.63383, "loss_wh": 2.05628, "loss": 106.46643, "grad_norm": 1753.69652, "time": 0.44858}
{"mode": "val", "epoch": 259, "iter": 60, "lr": 0.0, "bbox_mAP": 0.281, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.312, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.274, "bbox_mAP_copypaste": "0.281 0.523 0.312 -1.000 0.217 0.274"}
{"mode": "train", "epoch": 260, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.0824, "loss_cls": 11.51869, "loss_conf": 40.38513, "loss_xy": 49.19814, "loss_wh": 1.97046, "loss": 103.07243, "grad_norm": 1618.33983, "time": 0.4475}
{"mode": "val", "epoch": 260, "iter": 60, "lr": 0.0, "bbox_mAP": 0.284, "bbox_mAP_50": 0.52, "bbox_mAP_75": 0.314, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.277, "bbox_mAP_copypaste": "0.284 0.520 0.314 -1.000 0.217 0.277"}
{"mode": "train", "epoch": 261, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07296, "loss_cls": 11.79784, "loss_conf": 41.26824, "loss_xy": 50.31356, "loss_wh": 1.96684, "loss": 105.34647, "grad_norm": 1736.7498, "time": 0.44887}
{"mode": "val", "epoch": 261, "iter": 60, "lr": 0.0, "bbox_mAP": 0.284, "bbox_mAP_50": 0.521, "bbox_mAP_75": 0.313, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.277, "bbox_mAP_copypaste": "0.284 0.521 0.313 -1.000 0.217 0.277"}
{"mode": "train", "epoch": 262, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08101, "loss_cls": 10.50587, "loss_conf": 33.66266, "loss_xy": 49.15483, "loss_wh": 1.77798, "loss": 95.10134, "grad_norm": 1522.14133, "time": 0.45322}
{"mode": "val", "epoch": 262, "iter": 60, "lr": 0.0, "bbox_mAP": 0.284, "bbox_mAP_50": 0.527, "bbox_mAP_75": 0.283, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.2, "bbox_mAP_l": 0.278, "bbox_mAP_copypaste": "0.284 0.527 0.283 -1.000 0.200 0.278"}
{"mode": "train", "epoch": 263, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07903, "loss_cls": 12.04904, "loss_conf": 39.55203, "loss_xy": 47.8761, "loss_wh": 1.891, "loss": 101.36818, "grad_norm": 1619.10811, "time": 0.44712}
{"mode": "val", "epoch": 263, "iter": 60, "lr": 0.0, "bbox_mAP": 0.282, "bbox_mAP_50": 0.517, "bbox_mAP_75": 0.31, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.208, "bbox_mAP_l": 0.277, "bbox_mAP_copypaste": "0.282 0.517 0.310 -1.000 0.208 0.277"}
{"mode": "train", "epoch": 264, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.0799, "loss_cls": 10.26133, "loss_conf": 36.69556, "loss_xy": 46.01018, "loss_wh": 1.94243, "loss": 94.9095, "grad_norm": 1522.53494, "time": 0.45969}
{"mode": "val", "epoch": 264, "iter": 60, "lr": 0.0, "bbox_mAP": 0.288, "bbox_mAP_50": 0.525, "bbox_mAP_75": 0.306, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.281, "bbox_mAP_copypaste": "0.288 0.525 0.306 -1.000 0.217 0.281"}
{"mode": "train", "epoch": 265, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.09183, "loss_cls": 10.24507, "loss_conf": 38.73276, "loss_xy": 48.23241, "loss_wh": 1.81516, "loss": 99.02539, "grad_norm": 1652.42276, "time": 0.46435}
{"mode": "val", "epoch": 265, "iter": 60, "lr": 0.0, "bbox_mAP": 0.282, "bbox_mAP_50": 0.526, "bbox_mAP_75": 0.294, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.215, "bbox_mAP_l": 0.276, "bbox_mAP_copypaste": "0.282 0.526 0.294 -1.000 0.215 0.276"}
{"mode": "train", "epoch": 266, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07966, "loss_cls": 10.37953, "loss_conf": 38.2605, "loss_xy": 48.59632, "loss_wh": 2.03589, "loss": 99.27225, "grad_norm": 1558.28245, "time": 0.4462}
{"mode": "val", "epoch": 266, "iter": 60, "lr": 0.0, "bbox_mAP": 0.287, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.308, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.279, "bbox_mAP_copypaste": "0.287 0.523 0.308 -1.000 0.223 0.279"}
{"mode": "train", "epoch": 267, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07365, "loss_cls": 12.50573, "loss_conf": 40.581, "loss_xy": 51.41604, "loss_wh": 2.0, "loss": 106.50278, "grad_norm": 1691.34052, "time": 0.45135}
{"mode": "val", "epoch": 267, "iter": 60, "lr": 0.0, "bbox_mAP": 0.285, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.328, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.208, "bbox_mAP_l": 0.279, "bbox_mAP_copypaste": "0.285 0.523 0.328 -1.000 0.208 0.279"}
{"mode": "train", "epoch": 268, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.06852, "loss_cls": 12.16802, "loss_conf": 39.51823, "loss_xy": 49.79927, "loss_wh": 2.00137, "loss": 103.48689, "grad_norm": 1573.63574, "time": 0.43729}
{"mode": "val", "epoch": 268, "iter": 60, "lr": 0.0, "bbox_mAP": 0.287, "bbox_mAP_50": 0.525, "bbox_mAP_75": 0.306, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.279, "bbox_mAP_copypaste": "0.287 0.525 0.306 -1.000 0.223 0.279"}
{"mode": "train", "epoch": 269, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07417, "loss_cls": 11.76771, "loss_conf": 38.4742, "loss_xy": 47.63177, "loss_wh": 2.19305, "loss": 100.06673, "grad_norm": 1535.08525, "time": 0.44811}
{"mode": "val", "epoch": 269, "iter": 60, "lr": 0.0, "bbox_mAP": 0.282, "bbox_mAP_50": 0.52, "bbox_mAP_75": 0.29, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.215, "bbox_mAP_l": 0.274, "bbox_mAP_copypaste": "0.282 0.520 0.290 -1.000 0.215 0.274"}
{"mode": "train", "epoch": 270, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08421, "loss_cls": 11.48824, "loss_conf": 39.28487, "loss_xy": 48.81356, "loss_wh": 2.16345, "loss": 101.75013, "grad_norm": 1636.11644, "time": 0.46038}
{"mode": "val", "epoch": 270, "iter": 60, "lr": 0.0, "bbox_mAP": 0.284, "bbox_mAP_50": 0.522, "bbox_mAP_75": 0.304, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.2, "bbox_mAP_l": 0.278, "bbox_mAP_copypaste": "0.284 0.522 0.304 -1.000 0.200 0.278"}
{"mode": "train", "epoch": 271, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08709, "loss_cls": 10.1114, "loss_conf": 35.47099, "loss_xy": 46.63832, "loss_wh": 1.72473, "loss": 93.94544, "grad_norm": 1525.82192, "time": 0.4575}
{"mode": "val", "epoch": 271, "iter": 60, "lr": 0.0, "bbox_mAP": 0.28, "bbox_mAP_50": 0.515, "bbox_mAP_75": 0.313, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.275, "bbox_mAP_copypaste": "0.280 0.515 0.313 -1.000 0.223 0.275"}
{"mode": "train", "epoch": 272, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.07926, "loss_cls": 9.75134, "loss_conf": 34.78779, "loss_xy": 47.96067, "loss_wh": 1.68757, "loss": 94.18737, "grad_norm": 1581.63134, "time": 0.4533}
{"mode": "val", "epoch": 272, "iter": 60, "lr": 0.0, "bbox_mAP": 0.279, "bbox_mAP_50": 0.527, "bbox_mAP_75": 0.314, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.2, "bbox_mAP_l": 0.273, "bbox_mAP_copypaste": "0.279 0.527 0.314 -1.000 0.200 0.273"}
{"mode": "train", "epoch": 273, "iter": 50, "lr": 0.0, "memory": 6937, "data_time": 0.08044, "loss_cls": 12.33763, "loss_conf": 41.23155, "loss_xy": 50.11667, "loss_wh": 2.10003, "loss": 105.78588, "grad_norm": 1607.32698, "time": 0.45}
{"mode": "val", "epoch": 273, "iter": 60, "lr": 0.0, "bbox_mAP": 0.285, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.307, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.278, "bbox_mAP_copypaste": "0.285 0.523 0.307 -1.000 0.217 0.278"}
